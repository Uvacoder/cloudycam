import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { v2 as cloudinary } from 'cloudinary';
import { FaCamera } from 'react-icons/fa';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Button from '@components/Button';

import styles from '@styles/Share.module.scss'

import { CLOUDINARY_UPLOADS_FOLDER } from '@data/cloudinary';

export default function Share({ resource, url }) {
  const [transformations, setTransformations] = useState();

  console.log('transformations', transformations)

  useEffect(() => {
    (async function run() {
      const transformationResults = await fetch('/api/cloudinary/transformations', {
        url
      }).then(r => r.json());
      setTransformations(transformationResults);
    })();
  }, [url]);

  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <div>
          <img src={url} alt="Transformed Image" />
        </div>
      </Container>

      <Container className={styles.actionsContainer}>
        <p>
          <Link href="/camera" passHref={true}>
            <Button color="cloudinary-yellow" iconPosition="left">
              <FaCamera /> Create Your Own
            </Button>
          </Link>
        </p>
      </Container>
    </Layout>
  )
}

export async function getServerSideProps({ params, query }) {
  cloudinary.config({
    cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
    secure: true
  });

  const publicId = `${CLOUDINARY_UPLOADS_FOLDER}/${params.publicId}`;
  const resourceResults = await cloudinary.api.resource(publicId);

  const keys = [
    'public_id',
    'resource_type',
    'created_at',
    'width',
    'height',
    'secure_url',
  ];

  const resource = {};

  keys.forEach(key => resource[key] = resourceResults[key]);

  return {
    props: {
      resource,
      url: query.url
    }
  }
}